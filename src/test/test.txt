ext {
    nodeVersion = '22.16.0'
    npmVersion = '11.4.2'
    isWindows = System.properties['os.name'].toLowerCase().contains('windows')
    nodeDir = file("$buildDir/node")
    nodeDownloadUrl = isWindows ?
            "https://nodejs.org/dist/v${nodeVersion}/node-v${nodeVersion}-win-x64.zip" :
            "https://nodejs.org/dist/v${nodeVersion}/node-v${nodeVersion}-linux-x64.tar.xz"
    nodeExtractDir = isWindows ?
            "$nodeDir/node-v${nodeVersion}-win-x64" :
            "$nodeDir/node-v${nodeVersion}-linux-x64"
}

def nodeBin(String tool) {
    return isWindows ?
            "${nodeExtractDir}/${tool}.cmd" :
            "${nodeExtractDir}/bin/${tool}"
}

task downloadNode {
    outputs.file "$nodeDir/node-dist.${isWindows ? 'zip' : 'tar.xz'}"
    doLast {
        def archiveFile = outputs.files.singleFile
        if (!archiveFile.exists()) {
            println "Downloading Node.js..."
            nodeDir.mkdirs()
            new URL(nodeDownloadUrl).withInputStream { input ->
                archiveFile.withOutputStream { out -> out << input }
            }
        } else {
            println "Node.js archive already exists. Skipping download."
        }
    }
}

task extractNode(dependsOn: downloadNode) {
    outputs.dir nodeExtractDir
    onlyIf {
        def nodeBinary = isWindows ?
                file("${nodeExtractDir}/node.exe") :
                file("${nodeExtractDir}/bin/node")
        !nodeBinary.exists()
    }
    doLast {
        println "Extracting Node.js..."
        if (isWindows) {
            copy {
                from zipTree("$nodeDir/node-dist.zip")
                into nodeDir
            }
        } else {
            copy {
                from tarTree(resources.gzip("$nodeDir/node-dist.tar.xz"))
                into nodeDir
            }
        }
    }
}

task installNpm(dependsOn: extractNode) {
    def npmFolder = file("${nodeExtractDir}/lib/node_modules/npm")
    outputs.dir npmFolder
    onlyIf {
        npmVersion && !file("${npmFolder}/package.json").exists()
    }
    doLast {
        println "Installing npm@${npmVersion}..."
        exec {
            workingDir = file("$buildDir")
            environment "PATH", "${nodeExtractDir}" + File.pathSeparator + System.getenv("PATH")
            commandLine nodeBin("npm"), "install", "-g", "npm@${npmVersion}"
        }
    }
}

task npmInstallGherkinLint(type: Exec) {
    dependsOn installNpm
    workingDir = projectDir
    def binPath = "${nodeExtractDir}"
    environment "PATH", "${binPath}" + File.pathSeparator + System.getenv("PATH")
    commandLine "${binPath}/npm.cmd", "install", "gherkin-lint", "--save-dev"
    outputs.dir file("${projectDir}/node_modules/gherkin-lint")
    onlyIf {
        !file("${projectDir}/node_modules/gherkin-lint/package.json").exists()
    }
}

task lintFeatures(type: Exec) {
    dependsOn npmInstallGherkinLint
    description = "Lint .feature files using gherkin-lint"
    group = "verification"
    workingDir = projectDir
    def binPath = "${nodeExtractDir}"
    environment "PATH", "${binPath}" + File.pathSeparator + System.getenv("PATH")
    commandLine "${binPath}/npx.cmd", "gherkin-lint", "src/test/resources/features"
}

check.dependsOn lintFeatures


task formatFeatures(type: JavaExec) {
    group = "formatting"
    description = "Formats .feature files consistently"

    classpath = sourceSets.main.runtimeClasspath
    mainClass = "com.example.FeatureFormatterRunner"
}


{
  "no-empty-file": "on",
  "no-dupe-feature-names": "on",
  "no-dupe-scenario-names": "on",
  "no-trailing-spaces": "on",
  "no-unnamed-features": "on",
  "no-unnamed-scenarios": "on",
  "one-space-between-tags": "on",
  "indentation" : [
      "on", {
        "Feature": 0,
        "Background": 0,
        "Scenario": 0,
        "Step": 2,
        "Examples": 0,
        "example": 2,
        "given": 2,
        "when": 2,
        "then": 2,
        "and": 2,
        "but": 2,
        "feature tag": 0,
        "scenario tag": 0
      }
    ]
}
