import com.jcraft.jsch.*;

import java.io.*;
import java.util.Properties;

public class TarGzUploader {

    public static void main(String[] args) {
        String localDir = "files"; // Local folder to compress
        String localArchive = "files.tar.gz"; // Archive file name
        String remoteDir = "/home/remoteuser/uploads/"; // Remote destination directory
        String remoteHost = "your.linux.server.com";
        String username = "remoteuser";
        String password = "yourpassword";

        try {
            // Step 1: Create tar.gz archive
            createTarGz(localDir, localArchive);

            // Step 2: Connect and upload
            JSch jsch = new JSch();
            Session session = jsch.getSession(username, remoteHost, 22);
            session.setPassword(password);

            Properties config = new Properties();
            config.put("StrictHostKeyChecking", "no");
            session.setConfig(config);

            session.connect();
            System.out.println("Connected to remote host");

            // Upload archive
            uploadFile(session, localArchive, remoteDir + localArchive);

            // Step 3: Extract archive remotely
            String extractCommand = "tar -xzf " + remoteDir + localArchive + " -C " + remoteDir;
            executeRemoteCommand(session, extractCommand);

            // Step 4: Remove archive from remote
            String removeRemoteCmd = "rm " + remoteDir + localArchive;
            executeRemoteCommand(session, removeRemoteCmd);

            // Step 5: Delete local archive
            File localFile = new File(localArchive);
            if (localFile.exists() && localFile.delete()) {
                System.out.println("Deleted local archive: " + localArchive);
            } else {
                System.err.println("Failed to delete local archive: " + localArchive);
            }

            session.disconnect();
            System.out.println("Done.");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Compress a directory into tar.gz
    private static void createTarGz(String sourceDir, String outputTarGz) throws IOException, InterruptedException {
        File source = new File(sourceDir);
        if (!source.exists() || !source.isDirectory()) {
            throw new IllegalArgumentException("Invalid directory: " + sourceDir);
        }

        ProcessBuilder pb = new ProcessBuilder("tar", "-czf", outputTarGz, "-C", source.getParent(), source.getName());
        pb.inheritIO(); // Print tar command output
        Process process = pb.start();

        int result = process.waitFor();
        if (result != 0) {
            throw new IOException("Failed to create tar.gz archive");
        }

        System.out.println("Created local archive: " + outputTarGz);
    }

    // Upload file using SFTP
    private static void uploadFile(Session session, String localFile, String remotePath) throws JSchException, SftpException {
        ChannelSftp sftp = (ChannelSftp) session.openChannel("sftp");
        sftp.connect();
        sftp.put(localFile, remotePath);
        sftp.disconnect();
        System.out.println("Uploaded " + localFile + " to " + remotePath);
    }

    // Run a remote shell command
    private static void executeRemoteCommand(Session session, String command) throws JSchException, IOException {
        System.out.println("Executing on remote: " + command);
        ChannelExec exec = (ChannelExec) session.openChannel("exec");
        exec.setCommand(command);
        exec.setInputStream(null);
        exec.setErrStream(System.err);

        InputStream in = exec.getInputStream();
        exec.connect();

        BufferedReader reader = new BufferedReader(new InputStreamReader(in));
        String line;
        while ((line = reader.readLine()) != null) {
            System.out.println("[REMOTE] " + line);
        }

        exec.disconnect();
    }
}
import java.lang.management.ManagementFactory;
import java.lang.reflect.Method;

import javax.management.MBeanServer;

/**
 * Reflection based JVM heap dumper.
 */
public final class HeapDump {

    /** This is the name of the HotSpot Diagnostic MBean. */
    private static final String HOTSPOT_BEAN_NAME =
            "com.sun.management:type=HotSpotDiagnostic";

    /** Field to store the hotspot diagnostic MBean. */
    private static volatile Object hotspotMBean;

    /**
     * Constructor.
     */
    private HeapDump() {
        /* Empty. */
    }

    /**
     * Call this method from your application whenever you want to dump the heap snapshot into a file. Only dumps
     * live objects.
     *
     * @param fileName name of the heap dump file
     */
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public static void dumpHeap(final String fileName) {
        initHotspotMBean();
        try {
            final Class clazz = Class.forName("com.sun.management.HotSpotDiagnosticMXBean");
            final Method m = clazz.getMethod("dumpHeap", String.class, boolean.class);
            m.invoke(hotspotMBean, fileName, true);
        } catch (final RuntimeException re) {
            throw re;
        } catch (final Exception exp) {
            throw new RuntimeException(exp);
        }
    }

    /**
     * Get the hotspot diagnostic MBean from the platform MBean server.
     *
     * @return hotspot diagnostic MBean
     */
    @SuppressWarnings({ "unchecked", "rawtypes" })
    private static Object getHotspotMBean() {
        try {
            final Class clazz = Class.forName("com.sun.management.HotSpotDiagnosticMXBean");
            final MBeanServer server = ManagementFactory.getPlatformMBeanServer();
            return ManagementFactory.newPlatformMXBeanProxy(server,
                    HOTSPOT_BEAN_NAME, clazz);
        } catch (final RuntimeException re) {
            throw re;
        } catch (final Exception exp) {
            throw new RuntimeException(exp);
        }
    }

    /**
     * Initialize the hotspot diagnostic MBean field
     */
    private static void initHotspotMBean() {
        if (hotspotMBean == null) {
            synchronized (HeapDump.class) {
                if (hotspotMBean == null) {
                    hotspotMBean = getHotspotMBean();
                }
            }
        }
    }
}
